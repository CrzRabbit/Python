'''
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房
屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

提示：
0 <= nums.length <= 100
0 <= nums[i] <= 400
'''
class Solution:
    '''
    依次遍历
    temp[i]为从第0家偷到第i家最多金钱
    i < 2 temp[i] = nums[i]
    i >= 2 temp[i] = nums[i] + max(temp[0:i-1])
    '''
    def rob(self, nums) -> int:
        l = len(nums)
        temp = [0] * l
        for i in range(l):
            if i >= 2:
                temp[i] = nums[i] + max(temp[:i - 1])
            else:
                temp[i] = nums[i]
        return max(temp)

nums = [1, 0, 3, 8, 5, 0, 8, 18, 20]
so = Solution()
print(so.rob(nums))